package com.hr.webservices;

import com.hr.data.EmployeRepository;
import com.hr.data.DepartementRepository;

import com.hr.data.RoleRepository;
import com.hr.models.Employe;
import com.hr.models.Role;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Path("/employes")
public class EmployeWebService {

    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response getEmployes(@Context HttpHeaders headers) {
        String userId = headers.getHeaderString("user-id");

        if (userId == null) {
            return Response.status(Response.Status.UNAUTHORIZED).entity("Acc√®s refus√© : utilisateur non connect√©").build();
        }

        Employe utilisateur = EmployeRepository.getEmployeById(userId);
        if (utilisateur == null) {
            return Response.status(Response.Status.UNAUTHORIZED).entity("Utilisateur non trouv√©").build();
        }

        System.out.println("Utilisateur connect√© : " + utilisateur.getNom() + " - Role : " + utilisateur.getRole());

        List<Employe> employesAffiches;
        switch (utilisateur.getRole()) {
            case "Administrateur":
                employesAffiches = EmployeRepository.getAllEmployes();
                break;
            case "Responsable":
                employesAffiches = EmployeRepository.getAllEmployes()
                        .stream()
                        .filter(emp -> emp.getDepartement().equals(utilisateur.getDepartement()))
                        .collect(Collectors.toList());
                break;
            case "Employ√©":
                employesAffiches = List.of(utilisateur);
                break;
            default:
                return Response.status(Response.Status.FORBIDDEN).entity("R√¥le non autoris√©").build();
        }

        return Response.ok(employesAffiches).build();
    }

    @GET
    @Path("/{id}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getEmployeById(@PathParam("id") String id) {
        Employe employe = EmployeRepository.getEmployeById(id);
        if (employe == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Employ√© non trouv√©").build();
        }
        return Response.ok(employe).build();
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.TEXT_PLAIN)
    public Response ajouterEmploye(Employe employe) {
        if (employe == null || employe.getNom().isEmpty() || employe.getPrenom().isEmpty()) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Donn√©es invalides !").build();
        }

        // üîç V√©rifier si le d√©partement existe avant d'ajouter l'employ√©
        if (DepartementRepository.getDepartementByName(employe.getDepartement()) == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Le d√©partement sp√©cifi√© n'existe pas !").build();
        }

        // üîç V√©rifier si le r√¥le existe
        if (RoleRepository.getRoleByName(employe.getRole()) == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Le r√¥le sp√©cifi√© n'existe pas !").build();
        }

        // ‚úÖ G√©n√©ration automatique d'un ID et ajout de l'employ√©
        employe.setId(UUID.randomUUID().toString());
        EmployeRepository.addEmploye(employe);

        return Response.status(Response.Status.CREATED).entity("Employ√© ajout√© avec succ√®s !").build();
    }


    @PUT
    @Path("/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.TEXT_PLAIN)
    public Response updateEmploye(@PathParam("id") String id, Employe employe) {
        System.out.println("üîÑ Requ√™te PUT re√ßue pour employ√© ID: " + id);

        Employe employeExistant = EmployeRepository.getEmployeById(id);
        if (employeExistant == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Employ√© non trouv√©").build();
        }

        // ‚úÖ V√©rifier si le r√¥le existe avant modification
        Role role = RoleRepository.getAllRoles().stream()
                .filter(r -> r.getNom().equals(employe.getRole()))
                .findFirst()
                .orElse(null);

        if (role == null) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Le r√¥le sp√©cifi√© n'existe pas !").build();
        }

        // ‚úÖ V√©rifier si le d√©partement existe avant modification
        boolean departementExiste = DepartementRepository.getAllDepartements().stream()
                .anyMatch(d -> d.getNom().equals(employe.getDepartement()));

        if (!departementExiste) {
            return Response.status(Response.Status.BAD_REQUEST).entity("Le d√©partement sp√©cifi√© n'existe pas !").build();
        }

        // ‚úÖ Mise √† jour des donn√©es de l'employ√©
        employeExistant.setNom(employe.getNom());
        employeExistant.setPrenom(employe.getPrenom());
        employeExistant.setEmail(employe.getEmail());
        employeExistant.setTelephone(employe.getTelephone());
        employeExistant.setAdresse(employe.getAdresse());
        employeExistant.setNumeroSecuriteSociale(employe.getNumeroSecuriteSociale());
        employeExistant.setRole(employe.getRole());
        employeExistant.setDepartement(employe.getDepartement()); // ‚úÖ Ajout de la mise √† jour du d√©partement

        System.out.println("‚úÖ Employ√© mis √† jour avec succ√®s !");
        return Response.ok("Employ√© modifi√© avec succ√®s").build();
    }


    @PUT
    @Path("/updatePersonalInfo/{id}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.TEXT_PLAIN)
    public Response updatePersonalInfo(@PathParam("id") String id, Employe employe, @Context HttpHeaders headers) {
        String userId = headers.getHeaderString("user-id");

        // üîí V√©rification que l'employ√© ne peut modifier que ses propres informations
        if (userId == null || !userId.equals(id)) {
            return Response.status(Response.Status.UNAUTHORIZED).entity("Acc√®s refus√© : vous ne pouvez modifier que vos propres informations.").build();
        }

        Employe employeExistant = EmployeRepository.getEmployeById(id);
        if (employeExistant == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Employ√© non trouv√©").build();
        }

        // üîÑ Mise √† jour des champs autoris√©s uniquement
        employeExistant.setAdresse(employe.getAdresse());
        employeExistant.setTelephone(employe.getTelephone());

        return Response.ok("Informations mises √† jour avec succ√®s").build();
    }

    @DELETE
    @Path("/{id}")
    public Response supprimerEmploye(@PathParam("id") String id) {
        Employe existant = EmployeRepository.getEmployeById(id);
        if (existant == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Employ√© non trouv√© !").build();
        }
        EmployeRepository.removeEmploye(id);
        return Response.ok("Employ√© supprim√© avec succ√®s !").build();
    }
}
